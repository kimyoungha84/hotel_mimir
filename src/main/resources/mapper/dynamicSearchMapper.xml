<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.co.sist.util.mapper.DynamicSearchMapper">

<!-- 필터링 쿼리 -->
<sql id="filter">
<if test="filters != null and filters.size() > 0">
  <foreach collection="filters" item="filter">
    <choose>
      <when test="filter.operator.name() == 'EQ'">
        AND ${filter.column} = #{filter.value}
      </when>
      <when test="filter.operator.name() == 'LIKE'">
        AND ${filter.column} LIKE '%' || #{filter.value} || '%'
      </when>
      <when test="filter.operator.name() == 'IN'">
        <if test="filter.value != null and filter.value.size() > 1">
          AND ${filter.column} IN
          <foreach collection="filter.value" item="v" open="(" separator="," close=")">
            #{v}
          </foreach>
        </if>
        <if test="filter.value != null and filter.value.size() == 1">
          AND ${filter.column} = #{filter.value[0]}
        </if>
      </when>
          <!-- 날짜: BETWEEN (start + end) -->
        <when test="filter.operator.name() == 'TRUNC_BETWEEN'">
          AND TRUNC(${filter.column}) BETWEEN #{filter.value[0]} AND #{filter.value[1]}
        </when>

        <!-- 날짜: startDate만 있을 경우 -->
        <when test="filter.operator.name() == 'TRUNC_GREATER_EQUAL'">
          AND TRUNC(${filter.column}) &gt;= #{filter.value}
        </when>

        <!-- 날짜: endDate만 있을 경우 -->
        <when test="filter.operator.name() == 'TRUNC_LESS_EQUAL'">
          AND TRUNC(${filter.column}) &lt;= #{filter.value}
        </when>
    </choose>
  </foreach>
  </if>
</sql>
<!-- 필터링 쿼리 -->


<!-- 단순 셀렉트 -->
<sql id="diningSelectColumns">
  dining_id, dining_name, type, manager_name, dining_reg_date
</sql>

<sql id="faqSelectColumns">
  faq_num, faq_title, faq_content, faq_date
</sql>
<!-- 단순 셀렉트 -->

<!--///////////////////////////////// STAFF /////////////////////////////////-->

<sql id="whereFilter">
  <if test="filters != null and filters.size() > 0">
    <foreach collection="filters" item="filter">
      <if test="filter.column != 'permission_id_code'">
        <choose>
          <when test="filter.operator.name() == 'EQ'">
            AND ${filter.column} = #{filter.value}
          </when>
          <when test="filter.operator.name() == 'LIKE'">
            AND ${filter.column} LIKE '%' || #{filter.value} || '%'
          </when>
          <when test="filter.operator.name() == 'IN'">
            <foreach collection="filter.value" item="v" open="AND ${filter.column} IN (" separator="," close=")">
              #{v}
            </foreach>
          </when>
          <when test="filter.operator.name() == 'TRUNC_BETWEEN'">
            AND TRUNC(${filter.column}) BETWEEN #{filter.value[0]} AND #{filter.value[1]}
          </when>
          <when test="filter.operator.name() == 'TRUNC_GREATER_EQUAL'">
            AND TRUNC(${filter.column}) &gt;= #{filter.value}
          </when>
          <when test="filter.operator.name() == 'TRUNC_LESS_EQUAL'">
            AND TRUNC(${filter.column}) &lt;= #{filter.value}
          </when>
        </choose>
      </if>
    </foreach>
  </if>
</sql>


<sql id="havingFilter">
  <if test="filters != null and filters.size() > 0">
    <foreach collection="filters" item="filter">
      <if test="filter.column == 'permission_id_code'">
        HAVING INSTR(LISTAGG(p.permission_id_code, ','), #{filter.value}) > 0
      </if>
    </foreach>
  </if>
</sql>
<select id="searchStaff" resultType="kr.co.sist.util.domain.SearchDataDomain">
  SELECT staff_id, staff_name, dept_iden, position_identified_code, permission_ids, staff_status
  FROM (
    SELECT
      s.staff_id,
      s.staff_name,
      s.dept_iden,
      s.position_identified_code,
      LISTAGG(p.permission_id_code, ',') WITHIN GROUP (ORDER BY p.permission_id_code) AS permission_ids,
      s.staff_status,
      ROW_NUMBER() OVER (ORDER BY TO_DATE(s.date_of_employment, 'YYYY-MM-DD') DESC) AS rnum
    FROM staff s
    LEFT JOIN staff_permission p ON s.staff_id = p.staff_id
    WHERE 1=1
    <include refid="whereFilter"/>
    GROUP BY s.staff_id, s.staff_name, s.dept_iden, s.position_identified_code, s.staff_status, s.date_of_employment
    <include refid="havingFilter"/>
  )
  WHERE rnum BETWEEN #{offset} AND #{end}
</select>


<select id="countStaff" resultType="int">
  SELECT COUNT(*)
  FROM (
    SELECT s.staff_id
    FROM staff s
    LEFT JOIN staff_permission p ON s.staff_id = p.staff_id
    WHERE 1=1
    <include refid="whereFilter"/>
    GROUP BY s.staff_id, s.staff_name, s.dept_iden, s.position_identified_code, s.staff_status, s.date_of_employment
    <include refid="havingFilter"/>
  )
</select>

<!--///////////////////////////////// STAFF-END /////////////////////////////////-->



<!--///////////////////////////////// DINING /////////////////////////////////-->

<select id="searchDining" resultType="kr.co.sist.util.domain.SearchDataDomain">
 SELECT<include refid="diningSelectColumns"/>
FROM (
    SELECT <include refid="diningSelectColumns"/>,
           ROW_NUMBER() OVER (ORDER BY dining_reg_date DESC) rnum
    FROM dining
    WHERE 1=1
    <include refid="filter"/> <!-- 동적 필터 추가 -->
) 
WHERE rnum BETWEEN #{offset} AND #{end}
</select>

<select id="countDining" resultType="int">
     SELECT COUNT(*)
     FROM dining
     WHERE 1=1
  <include refid="filter"/>
</select>

<!--///////////////////////////////// DINING-END /////////////////////////////////-->


<!--///////////////////////////////// USER-DINING /////////////////////////////////-->

<sql id="userDiningSelectColumns">
  dining_id, dining_name, type, location, phone_number, dining_classification
</sql>


<select id="searchUserDining" resultType="kr.co.sist.util.domain.SearchDataDomain">
 SELECT<include refid="userDiningSelectColumns"/>
FROM (
    SELECT <include refid="userDiningSelectColumns"/>,
           ROW_NUMBER() OVER (ORDER BY dining_reg_date DESC) rnum
    FROM dining
    WHERE 1=1
    <include refid="filter"/> <!-- 동적 필터 추가 -->
) 
WHERE rnum BETWEEN #{offset} AND #{end}
</select>


<!--///////////////////////////////// USER-DINING-END /////////////////////////////////-->


<!--///////////////////////////////// DINING_RESV /////////////////////////////////-->

<sql id="diningResvSelectColumnsAlias">
  r.RESERVATION_ID AS reservation_id,
  r.RESERVATION_NAME AS reservation_name,
  d.DINING_NAME AS dining_name,
  r.RESERVATION_DATE AS reservation_date,
  r.RESERVATION_STATUS AS reservation_status
</sql>

<sql id="diningResvSelectColumns">
  reservation_id,
  reservation_name,
  dining_name,
  reservation_date,
  reservation_status
</sql>

<select id="searchDiningResv" resultType="kr.co.sist.util.domain.SearchDataDomain">
  SELECT <include refid="diningResvSelectColumns"/>
  FROM (
    SELECT <include refid="diningResvSelectColumnsAlias"/>,
           ROW_NUMBER() OVER (ORDER BY r.RESERVATION_TIME DESC) rnum
    FROM DINING_RESERVATION r
    LEFT JOIN DINING d ON r.DINING_ID = d.DINING_ID
    WHERE 1=1
    <include refid="filter"/>
  )
  WHERE rnum BETWEEN #{offset} AND #{end}
</select>

<select id="countDiningResv" resultType="int">
  SELECT COUNT(*)
  FROM DINING_RESERVATION r
  LEFT JOIN DINING d ON r.DINING_ID = d.DINING_ID
  WHERE 1=1
  <include refid="filter"/>
</select>

<!--///////////////////////////////// DINING_RESV-END /////////////////////////////////-->






<!--///////////////////////////////// FAQ /////////////////////////////////-->

<select id="searchFaq" resultType="kr.co.sist.util.domain.SearchDataDomain">
 SELECT <include refid="faqSelectColumns"/>
FROM (
    SELECT <include refid="faqSelectColumns"/>,
           ROW_NUMBER() OVER (ORDER BY faq_date DESC) rnum
    FROM faq
    WHERE 1=1
    <include refid="filter"/> <!-- 동적 필터 추가 -->
) 
WHERE rnum BETWEEN #{offset} AND #{end}
</select>

<select id="countFaq" resultType="int">
     SELECT COUNT(*)
     FROM faq
     WHERE 1=1
  <include refid="filter"/>
</select>

<!--///////////////////////////////// FAQ-END /////////////////////////////////-->

</mapper>
